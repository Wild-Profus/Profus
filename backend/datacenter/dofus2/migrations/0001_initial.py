# Generated by Django 3.1.4 on 2020-12-22 16:34

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('description_fr', models.TextField(blank=True)),
                ('description_en', models.TextField(blank=True)),
                ('description_es', models.TextField(blank=True)),
                ('description_pt', models.TextField(blank=True)),
                ('description_it', models.TextField(blank=True)),
                ('description_de', models.TextField(blank=True)),
                ('icon_id', models.IntegerField()),
                ('level', models.IntegerField()),
                ('points', models.IntegerField()),
                ('account_linked', models.BooleanField()),
            ],
            options={
                'ordering': ['-points', '-level'],
            },
        ),
        migrations.CreateModel(
            name='AchievementObjective',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='objectives', to='dofus2.achievement')),
            ],
            options={
                'db_table': 'dofus2_achievement_objective',
                'ordering': ['achievement_id'],
            },
        ),
        migrations.CreateModel(
            name='AchievementReward',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField(choices=[(0, 'None'), (1, 'Item'), (2, 'Emote'), (3, 'Spell'), (4, 'Title'), (5, 'Ornament')])),
                ('kamas_ratio', models.FloatField()),
                ('experience_ratio', models.FloatField()),
                ('scaling', models.BooleanField(default=False)),
                ('item_quantity', models.IntegerField()),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rewards', to='dofus2.achievement')),
            ],
            options={
                'db_table': 'dofus2_achievement_reward',
                'ordering': ['achievement_id'],
            },
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('male_look', models.CharField(max_length=32)),
                ('female_look', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'dofus2_character_class',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Characteristic',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('weight', models.IntegerField(null=True)),
                ('category', models.IntegerField(blank=True, choices=[(0, 'Primary'), (1, 'Secondary'), (2, 'Damage'), (3, 'Resistance')], default=None, null=True)),
            ],
            options={
                'ordering': ['category', '-weight'],
            },
        ),
        migrations.CreateModel(
            name='Dungeon',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('level', models.IntegerField()),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='EffectArea',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Emote',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('cmd_fr', models.TextField(blank=True)),
                ('cmd_en', models.TextField(blank=True)),
                ('cmd_es', models.TextField(blank=True)),
                ('cmd_pt', models.TextField(blank=True)),
                ('cmd_it', models.TextField(blank=True)),
                ('cmd_de', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Idol',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description_fr', models.TextField(blank=True)),
                ('description_en', models.TextField(blank=True)),
                ('description_es', models.TextField(blank=True)),
                ('description_pt', models.TextField(blank=True)),
                ('description_it', models.TextField(blank=True)),
                ('description_de', models.TextField(blank=True)),
                ('group', models.BooleanField()),
                ('score', models.IntegerField()),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='IdolSet',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('score', models.IntegerField()),
            ],
            options={
                'db_table': 'dofus2_idol_set',
                'ordering': ['-score'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('icon_id', models.IntegerField()),
                ('level', models.IntegerField()),
                ('weight', models.IntegerField()),
                ('pnj_price', models.IntegerField()),
                ('food_xp', models.IntegerField()),
                ('nuggets', models.DecimalField(decimal_places=12, max_digits=25)),
            ],
            options={
                'ordering': ['-level'],
            },
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('category', models.IntegerField(choices=[(1, 'COLLAR'), (2, 'WEAPON'), (3, 'RING'), (4, 'BELT'), (5, 'SHOES'), (6, 'CONSUMABLE'), (7, 'SHIELD'), (8, 'CATCHING ITEMS'), (9, 'RESOURCES'), (10, 'HELMET'), (11, 'CAPE'), (12, 'PET'), (13, 'DOFUS TROPHY'), (14, 'QUEST_ITEMS'), (15, 'MUTATIONS'), (16, 'FOODS'), (17, 'BLESSINGS'), (18, 'CURSES'), (19, 'ROLEPLAY BUFFS'), (20, 'FOLLOWERS'), (21, 'MOUNTS'), (22, 'LIVING ITEMS'), (23, 'COMPANION'), (24, 'MOUNT EQUIPMENT'), (25, 'COSTUME'), (27, 'CERTIFICATE'), (28, 'PET GHOST')])),
                ('sort', models.IntegerField(choices=[(1, 'Equipment'), (2, 'Consumable'), (3, 'Resource'), (4, 'Quest')])),
                ('effect_area', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='weapon_types', to='dofus2.effectarea')),
            ],
            options={
                'verbose_name': 'item category',
                'verbose_name_plural': 'item categories',
                'db_table': 'dofus2_item_category',
                'ordering': ['sort', 'category'],
            },
        ),
        migrations.CreateModel(
            name='ItemSet',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'dofus2_item_set',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Monster',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('gfx', models.TextField(blank=True)),
                ('look', models.TextField(blank=True, null=True)),
                ('type', models.IntegerField(choices=[(0, 'Normal'), (1, 'Boss'), (2, 'Unique')], default=0)),
                ('idols_allowed', models.BooleanField(default=True)),
                ('dares_allowed', models.BooleanField(default=True)),
                ('pushable', models.BooleanField(default=True)),
                ('carriable', models.BooleanField(default=True)),
                ('transposable', models.BooleanField(default=True)),
                ('portalable', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['race_id', 'id'],
            },
        ),
        migrations.CreateModel(
            name='MonsterGrade',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('grade', models.IntegerField()),
                ('level', models.IntegerField()),
                ('life_points', models.IntegerField()),
                ('action_points', models.IntegerField()),
                ('movement_points', models.IntegerField()),
                ('vitality', models.IntegerField()),
                ('pa_dodge', models.IntegerField()),
                ('pm_dodge', models.IntegerField()),
                ('wisdom', models.IntegerField()),
                ('earth_resistance', models.IntegerField()),
                ('air_resistance', models.IntegerField()),
                ('fire_resistance', models.IntegerField()),
                ('water_resistance', models.IntegerField()),
                ('neutral_resistance', models.IntegerField()),
                ('xp', models.IntegerField()),
                ('damage_reflect', models.IntegerField()),
                ('hidden_level', models.IntegerField()),
                ('strength', models.IntegerField()),
                ('intelligence', models.IntegerField()),
                ('chance', models.IntegerField()),
                ('agility', models.IntegerField()),
                ('bonus_range', models.IntegerField()),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='dofus2.monster')),
            ],
            options={
                'db_table': 'dofus2_monster_grade',
                'ordering': ['monster_id', 'grade'],
            },
        ),
        migrations.CreateModel(
            name='MonsterGradeDrop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('chance', models.FloatField()),
                ('item', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.PROTECT, related_name='from_monsters', to='dofus2.item')),
                ('monster_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drops', to='dofus2.monstergrade')),
            ],
            options={
                'db_table': 'dofus2_monster_grade_drop',
                'ordering': ['monster_grade_id', 'chance'],
            },
        ),
        migrations.CreateModel(
            name='MonsterSuperRace',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'dofus2_monster_super_race',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Mount',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('look', models.CharField(max_length=64)),
            ],
            options={
                'ordering': ['category_id', 'id'],
            },
        ),
        migrations.CreateModel(
            name='MountCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('head', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'verbose_name': 'mount category',
                'verbose_name_plural': 'mount categories',
                'db_table': 'dofus2_mount_category',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='MountSingularity',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'mount singularity',
                'verbose_name_plural': 'mount singularities',
                'db_table': 'dofus2_mount_singularity',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Npc',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('look', models.TextField()),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='NpcDialog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('index', models.IntegerField()),
                ('dialog_fr', models.TextField(blank=True)),
                ('dialog_en', models.TextField(blank=True)),
                ('dialog_es', models.TextField(blank=True)),
                ('dialog_pt', models.TextField(blank=True)),
                ('dialog_it', models.TextField(blank=True)),
                ('dialog_de', models.TextField(blank=True)),
                ('category', models.IntegerField(choices=[(0, 'Dialog'), (1, 'Reply')], default=0)),
                ('npc', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dialogs', to='dofus2.npc')),
            ],
            options={
                'db_table': 'dofus2_npc_dialog',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='NpcMessage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('message_id', models.IntegerField()),
                ('message_fr', models.TextField(blank=True)),
                ('message_en', models.TextField(blank=True)),
                ('message_es', models.TextField(blank=True)),
                ('message_pt', models.TextField(blank=True)),
                ('message_it', models.TextField(blank=True)),
                ('message_de', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'dofus2_npc_message',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Ornament',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('asset_id', models.IntegerField()),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('repeat_type', models.IntegerField()),
                ('dungeon', models.BooleanField()),
                ('group', models.BooleanField()),
                ('level_min', models.IntegerField()),
                ('level_max', models.IntegerField()),
                ('start_criterion', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='QuestCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'quest category',
                'verbose_name_plural': 'quest categories',
                'db_table': 'dofus2_quest_category',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('active', models.BooleanField(default=True)),
                ('game_mode', models.IntegerField(choices=[(0, 'Normal'), (1, 'Hardcore'), (2, 'PVM Hardcore'), (3, 'Temporis'), (4, 'Beta'), (5, 'Non official')], default=0)),
                ('mono', models.BooleanField(default=False)),
                ('flag', models.CharField(choices=[('fr', 'Fr'), ('en', 'En'), ('es', 'Es'), ('pt', 'Pt'), ('it', 'It'), ('de', 'De')], max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('description_fr', models.TextField(blank=True)),
                ('description_en', models.TextField(blank=True)),
                ('description_es', models.TextField(blank=True)),
                ('description_pt', models.TextField(blank=True)),
                ('description_it', models.TextField(blank=True)),
                ('description_de', models.TextField(blank=True)),
                ('icon_id', models.IntegerField(null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SpellLevel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('grade', models.IntegerField()),
                ('ap_cost', models.IntegerField()),
                ('min_range', models.IntegerField()),
                ('range', models.IntegerField()),
                ('range_alterable', models.BooleanField()),
                ('cast_in_line', models.BooleanField()),
                ('cast_in_diagonal', models.BooleanField()),
                ('critical_chance', models.IntegerField()),
                ('max_stack', models.IntegerField()),
                ('cast_per_turn', models.IntegerField()),
                ('cast_per_target', models.IntegerField()),
                ('cast_interval', models.IntegerField()),
                ('start_cooldown', models.IntegerField()),
                ('global_cooldown', models.IntegerField()),
                ('min_level', models.IntegerField(null=True)),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='dofus2.spell')),
            ],
            options={
                'db_table': 'dofus2_spell_level',
                'ordering': ['spell_id', 'grade'],
            },
        ),
        migrations.CreateModel(
            name='SpellState',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('icon_id', models.CharField(blank=True, max_length=64, null=True)),
                ('silent', models.BooleanField()),
                ('incurable', models.BooleanField()),
                ('invulnerability', models.IntegerField(choices=[(0, 'None'), (1, 'Melee'), (2, 'Range'), (3, 'Immunity')], default=0)),
                ('prevents', models.IntegerField(choices=[(0, 'None'), (1, 'Spell'), (2, 'Fight'), (3, 'Both'), (4, 'Damage')], default=0)),
                ('takle', models.IntegerField(choices=[(0, 'None'), (1, 'No Takle'), (2, 'Escape all'), (3, 'Ignore')], default=0)),
                ('movement', models.IntegerField(choices=[(0, 'None'), (1, 'Move'), (2, 'Push'), (3, 'Switch'), (4, 'Push nor Move'), (5, 'Move nor Switch'), (6, 'Push nor Switch'), (7, 'All')], default=0)),
            ],
            options={
                'db_table': 'dofus2_spell_state',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('male_name_fr', models.TextField(blank=True)),
                ('male_name_en', models.TextField(blank=True)),
                ('male_name_es', models.TextField(blank=True)),
                ('male_name_pt', models.TextField(blank=True)),
                ('male_name_it', models.TextField(blank=True)),
                ('male_name_de', models.TextField(blank=True)),
                ('female_name_fr', models.TextField(blank=True)),
                ('female_name_en', models.TextField(blank=True)),
                ('female_name_es', models.TextField(blank=True)),
                ('female_name_pt', models.TextField(blank=True)),
                ('female_name_it', models.TextField(blank=True)),
                ('female_name_de', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('result', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='recipes', serialize=False, to='dofus2.item')),
                ('xp', models.IntegerField()),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to='dofus2.job')),
            ],
            options={
                'ordering': ['result_id'],
            },
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dofus2.item')),
                ('ap_cost', models.IntegerField()),
                ('min_range', models.IntegerField(null=True)),
                ('range', models.IntegerField(null=True)),
                ('casts_per_turn', models.IntegerField(null=True)),
                ('critical_hit_chance', models.IntegerField(null=True)),
                ('critical_damage', models.IntegerField(null=True)),
            ],
            options={
                'ordering': ['-ap_cost'],
            },
        ),
        migrations.CreateModel(
            name='SpellStateEffect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effect_id', models.IntegerField()),
                ('name_fr', models.CharField(blank=True, max_length=256)),
                ('name_en', models.CharField(blank=True, max_length=256)),
                ('name_es', models.CharField(blank=True, max_length=256)),
                ('name_pt', models.CharField(blank=True, max_length=256)),
                ('name_it', models.CharField(blank=True, max_length=256)),
                ('name_de', models.CharField(blank=True, max_length=256)),
                ('effect_priority', models.IntegerField()),
                ('element', models.IntegerField(choices=[(-2, 'ELEMENT_MULTI'), (-1, 'ELEMENT_UNDEFINED'), (0, 'ELEMENT_NEUTRAL'), (1, 'ELEMENT_EARTH'), (2, 'ELEMENT_FIRE'), (3, 'ELEMENT_WATER'), (4, 'ELEMENT_AIR'), (5, 'ELEMENT_NONE'), (6, 'ELEMENT_BEST')], default=-1)),
                ('value', models.IntegerField(null=True)),
                ('characteristic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.characteristic')),
                ('spell_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effects', to='dofus2.spellstate')),
            ],
            options={
                'db_table': 'dofus2_spell_state_effect',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SpellLevelEffect',
            fields=[
                ('effect_id', models.IntegerField()),
                ('name_fr', models.CharField(blank=True, max_length=256)),
                ('name_en', models.CharField(blank=True, max_length=256)),
                ('name_es', models.CharField(blank=True, max_length=256)),
                ('name_pt', models.CharField(blank=True, max_length=256)),
                ('name_it', models.CharField(blank=True, max_length=256)),
                ('name_de', models.CharField(blank=True, max_length=256)),
                ('effect_priority', models.IntegerField()),
                ('element', models.IntegerField(choices=[(-2, 'ELEMENT_MULTI'), (-1, 'ELEMENT_UNDEFINED'), (0, 'ELEMENT_NEUTRAL'), (1, 'ELEMENT_EARTH'), (2, 'ELEMENT_FIRE'), (3, 'ELEMENT_WATER'), (4, 'ELEMENT_AIR'), (5, 'ELEMENT_NONE'), (6, 'ELEMENT_BEST')], default=-1)),
                ('value', models.IntegerField(null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('min_value', models.IntegerField(null=True)),
                ('critical', models.BooleanField(default=False)),
                ('order', models.IntegerField(null=True)),
                ('target_mask', models.CharField(max_length=128)),
                ('duration', models.IntegerField(null=True)),
                ('delay', models.IntegerField(null=True)),
                ('random', models.IntegerField(null=True)),
                ('group', models.IntegerField(null=True)),
                ('triggers', models.CharField(max_length=128)),
                ('zone_size', models.IntegerField(null=True)),
                ('zone_shape', models.IntegerField(null=True)),
                ('zone_min_size', models.IntegerField(null=True)),
                ('zone_efficiency_percent', models.IntegerField(null=True)),
                ('zone_max_efficiency', models.IntegerField(null=True)),
                ('zone_stop_at_target', models.IntegerField(null=True)),
                ('min_level', models.IntegerField(null=True)),
                ('characteristic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.characteristic')),
                ('monster', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='dofus2.monster')),
                ('spell_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effects', to='dofus2.spelllevel')),
                ('spell_state', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='dofus2.spellstate')),
            ],
            options={
                'db_table': 'dofus2_spell_level_effect',
                'ordering': ['spell_level_id', 'critical'],
            },
        ),
        migrations.CreateModel(
            name='SpellCondition',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('condition', models.IntegerField(choices=[(0, 'Forbidden'), (1, 'Required'), (2, 'Authorized')])),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='dofus2.spell')),
                ('spell_state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='spells', to='dofus2.spellstate')),
            ],
            options={
                'db_table': 'dofus2_spell_condition',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('min_level', models.IntegerField()),
                ('collectable', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='source_skill', to='dofus2.item')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='dofus2.job')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='QuestStep',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('description_fr', models.TextField(blank=True)),
                ('description_en', models.TextField(blank=True)),
                ('description_es', models.TextField(blank=True)),
                ('description_pt', models.TextField(blank=True)),
                ('description_it', models.TextField(blank=True)),
                ('description_de', models.TextField(blank=True)),
                ('optimal_level', models.IntegerField()),
                ('duration', models.FloatField()),
                ('dialog', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='quest_steps', to='dofus2.npcdialog')),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='steps', to='dofus2.quest')),
            ],
            options={
                'db_table': 'dofus2_quest_step',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='quest',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='quests', to='dofus2.questcategory'),
        ),
        migrations.CreateModel(
            name='MountFood',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('item_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dofus2.itemcategory')),
                ('mount_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dofus2.mountcategory')),
            ],
            options={
                'db_table': 'dofus2_mount_food',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='MountEffect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effect_id', models.IntegerField()),
                ('name_fr', models.CharField(blank=True, max_length=256)),
                ('name_en', models.CharField(blank=True, max_length=256)),
                ('name_es', models.CharField(blank=True, max_length=256)),
                ('name_pt', models.CharField(blank=True, max_length=256)),
                ('name_it', models.CharField(blank=True, max_length=256)),
                ('name_de', models.CharField(blank=True, max_length=256)),
                ('effect_priority', models.IntegerField()),
                ('element', models.IntegerField(choices=[(-2, 'ELEMENT_MULTI'), (-1, 'ELEMENT_UNDEFINED'), (0, 'ELEMENT_NEUTRAL'), (1, 'ELEMENT_EARTH'), (2, 'ELEMENT_FIRE'), (3, 'ELEMENT_WATER'), (4, 'ELEMENT_AIR'), (5, 'ELEMENT_NONE'), (6, 'ELEMENT_BEST')], default=-1)),
                ('value', models.IntegerField(null=True)),
                ('min_value', models.IntegerField(null=True)),
                ('characteristic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.characteristic')),
                ('mount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effects', to='dofus2.mount')),
            ],
            options={
                'db_table': 'dofus2_mount_effect',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='mount',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dofus2.mountcategory'),
        ),
        migrations.AddField(
            model_name='mount',
            name='certificate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dofus2.item'),
        ),
        migrations.CreateModel(
            name='MonsterSpell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dofus2.monster')),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dofus2.spell')),
            ],
            options={
                'db_table': 'dofus2_monster_spell',
                'ordering': ['monster_id', 'spell_id'],
            },
        ),
        migrations.CreateModel(
            name='MonsterRace',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('super_race', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='races', to='dofus2.monstersuperrace')),
            ],
            options={
                'db_table': 'dofus2_monster_race',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='MonsterGradeDropCriterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('drop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='dofus2.monstergradedrop')),
            ],
            options={
                'verbose_name': 'monster grade drop criterion',
                'verbose_name_plural': 'monster grade drop criteria',
                'db_table': 'dofus2_monster_grade_drop_criterion',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='monstergrade',
            name='starting_spell',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='monster_starters', to='dofus2.spell'),
        ),
        migrations.AddField(
            model_name='monster',
            name='race',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.PROTECT, to='dofus2.monsterrace'),
        ),
        migrations.CreateModel(
            name='ItemSetEffect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effect_id', models.IntegerField()),
                ('name_fr', models.CharField(blank=True, max_length=256)),
                ('name_en', models.CharField(blank=True, max_length=256)),
                ('name_es', models.CharField(blank=True, max_length=256)),
                ('name_pt', models.CharField(blank=True, max_length=256)),
                ('name_it', models.CharField(blank=True, max_length=256)),
                ('name_de', models.CharField(blank=True, max_length=256)),
                ('effect_priority', models.IntegerField()),
                ('element', models.IntegerField(choices=[(-2, 'ELEMENT_MULTI'), (-1, 'ELEMENT_UNDEFINED'), (0, 'ELEMENT_NEUTRAL'), (1, 'ELEMENT_EARTH'), (2, 'ELEMENT_FIRE'), (3, 'ELEMENT_WATER'), (4, 'ELEMENT_AIR'), (5, 'ELEMENT_NONE'), (6, 'ELEMENT_BEST')], default=-1)),
                ('value', models.IntegerField(null=True)),
                ('item_count', models.IntegerField()),
                ('characteristic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.characteristic')),
                ('emote', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='dofus2.emote')),
                ('item_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effects', to='dofus2.itemset')),
                ('spell', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='dofus2.spell')),
                ('title', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='dofus2.title')),
            ],
            options={
                'db_table': 'dofus2_item_set_effect',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ItemEffect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effect_id', models.IntegerField()),
                ('name_fr', models.CharField(blank=True, max_length=256)),
                ('name_en', models.CharField(blank=True, max_length=256)),
                ('name_es', models.CharField(blank=True, max_length=256)),
                ('name_pt', models.CharField(blank=True, max_length=256)),
                ('name_it', models.CharField(blank=True, max_length=256)),
                ('name_de', models.CharField(blank=True, max_length=256)),
                ('effect_priority', models.IntegerField()),
                ('element', models.IntegerField(choices=[(-2, 'ELEMENT_MULTI'), (-1, 'ELEMENT_UNDEFINED'), (0, 'ELEMENT_NEUTRAL'), (1, 'ELEMENT_EARTH'), (2, 'ELEMENT_FIRE'), (3, 'ELEMENT_WATER'), (4, 'ELEMENT_AIR'), (5, 'ELEMENT_NONE'), (6, 'ELEMENT_BEST')], default=-1)),
                ('value', models.IntegerField(null=True)),
                ('min_value', models.IntegerField(null=True)),
                ('characteristic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.characteristic')),
                ('emote', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='dofus2.emote')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effects', to='dofus2.item')),
                ('spell', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='dofus2.spell')),
                ('title', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='dofus2.title')),
            ],
            options={
                'db_table': 'dofus2_item_effect',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ItemCriterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='dofus2.item')),
            ],
            options={
                'verbose_name': 'item criterion',
                'verbose_name_plural': 'item criteria',
                'db_table': 'dofus2_item_criterion',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='item',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='items', to='dofus2.itemcategory'),
        ),
        migrations.AddField(
            model_name='item',
            name='item_set',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.itemset'),
        ),
        migrations.CreateModel(
            name='IdolSynergy',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('coef', models.FloatField()),
                ('idol', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='synergies', to='dofus2.idol')),
                ('synergy_idol', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='dofus2.idol')),
            ],
            options={
                'verbose_name': 'idol synergy',
                'verbose_name_plural': 'idol synergies',
                'db_table': 'dofus2_idol_synergy',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='IdolSetIdol',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('idol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sets', to='dofus2.idol')),
                ('idol_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='idols', to='dofus2.idolset')),
            ],
            options={
                'db_table': 'dofus2_idol_set_idol',
                'ordering': ['idol_id'],
            },
        ),
        migrations.CreateModel(
            name='IdolIncompatibleMonster',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('idol', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='incompatible_monsters', to='dofus2.idol')),
                ('monster', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.PROTECT, related_name='incompatible_idols', to='dofus2.monster')),
            ],
            options={
                'db_table': 'dofus2_idol_incompatible_monster',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='idol',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='idols', to='dofus2.item'),
        ),
        migrations.CreateModel(
            name='CharacterClassSpell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField()),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dofus2.characterclass')),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dofus2.spell')),
            ],
            options={
                'db_table': 'dofus2_character_class_spell',
                'ordering': ['character_class_id', 'index'],
            },
        ),
        migrations.CreateModel(
            name='Almanax',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description_fr', models.TextField(blank=True)),
                ('description_en', models.TextField(blank=True)),
                ('description_es', models.TextField(blank=True)),
                ('description_pt', models.TextField(blank=True)),
                ('description_it', models.TextField(blank=True)),
                ('description_de', models.TextField(blank=True)),
                ('day', models.IntegerField()),
                ('month', models.IntegerField()),
                ('bonus', models.IntegerField()),
                ('quantity', models.IntegerField()),
                ('kamas_reward', models.IntegerField()),
                ('meryde', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='almanax_quests', to='dofus2.npc')),
                ('offering', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='almanax_quests', to='dofus2.item')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='AchievementRewardCriterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('achievement_reward', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='criteria', to='dofus2.achievementreward')),
            ],
            options={
                'verbose_name': 'achievement reward criterion',
                'verbose_name_plural': 'achievement reward criteria',
                'db_table': 'dofus2_achievement_reward_criterion',
                'ordering': ['achievement_reward_id'],
            },
        ),
        migrations.AddField(
            model_name='achievementreward',
            name='emote',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.emote'),
        ),
        migrations.AddField(
            model_name='achievementreward',
            name='item',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.item'),
        ),
        migrations.AddField(
            model_name='achievementreward',
            name='ornament',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.ornament'),
        ),
        migrations.AddField(
            model_name='achievementreward',
            name='spell',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.spell'),
        ),
        migrations.AddField(
            model_name='achievementreward',
            name='title',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='dofus2.title'),
        ),
        migrations.CreateModel(
            name='AchievementObjectiveCriterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('achievement_objective', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='criteria', to='dofus2.achievementobjective')),
            ],
            options={
                'verbose_name': 'achievement objective criterion',
                'verbose_name_plural': 'achievement objective criteria',
                'db_table': 'dofus2_achievement_objective_criterion',
                'ordering': ['achievement_objective_id'],
            },
        ),
        migrations.CreateModel(
            name='AchievementCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_fr', models.TextField(blank=True)),
                ('name_en', models.TextField(blank=True)),
                ('name_es', models.TextField(blank=True)),
                ('name_pt', models.TextField(blank=True)),
                ('name_it', models.TextField(blank=True)),
                ('name_de', models.TextField(blank=True)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='childs', to='dofus2.achievementcategory')),
            ],
            options={
                'verbose_name': 'achievement category',
                'verbose_name_plural': 'achievement categories',
                'db_table': 'dofus2_achievement_category',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='achievement',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='achievements', to='dofus2.achievementcategory'),
        ),
        migrations.CreateModel(
            name='RecipeElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_recipes', to='dofus2.item')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='dofus2.recipe')),
            ],
            options={
                'db_table': 'dofus2_recipe_element',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to='dofus2.skill'),
        ),
    ]
